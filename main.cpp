#include <iostream>
#include <memory>
#include <cassert>
#include <vector>
#include <complex>
#include <string>
#include <fstream>
#include <chrono>

#define lapack_complex_double std::complex<double>
#define lapack_complex_double_real(z) (std::real(z))
#define lapack_complex_double_imag(z) (std::imag(z))

#include <cblas.h>
#include <lapacke.h>

const double COEF_DEG10_RE[] = {0.136112052334544905E-09, 0.963676398167865499E+01,
                                -0.142343302081794718E+02, 0.513116990967461106E+01,
                                -0.545173960592769901E+00, 0.115698077160221179E-01};
const double COEF_DEG10_IM[] = {0, -0.421091944767815675E+02, 0.176390663157379776E+02,
                                -0.243277141223876469E+01, 0.284234540632477550E-01,
                                0.137170141788336280E-02};
const double ROOT_DEG10_RE[] = {-0.402773246751880265E+01, -0.328375288323169911E+01,
                                -0.171540601576881357E+01, 0.894404701609481378E+00,
                                0.516119127202031791E+01};
const double ROOT_DEG10_IM[] = {0.119385606645509767E+01, 0.359438677235566217E+01,
                                0.603893492548519361E+01, 0.858275689861307000E+01,
                                0.113751562519165076E+02};

const double COEF_DEG14_RE[] = {0.183216998528140087E-11, 0.557503973136501826E+02,
                                -0.938666838877006739E+02, 0.469965415550370835E+02,
                                -0.961424200626061065E+01, 0.752722063978321642E+00,
                                -0.188781253158648576E-01, 0.143086431411801849E-03};
const double COEF_DEG14_IM[] = {0, -0.204295038779771857E+03, 0.912874896775456363E+02,
                                -0.116167609985818103E+02, -0.264195613880262669E+01,
                                0.670367365566377770E+00, -0.343696176445802414E-01,
                                0.287221133228814096E-03};
const double ROOT_DEG14_RE[] = {-0.562314417475317895E+01, -0.508934679728216110E+01,
                                -0.399337136365302569E+01, -0.226978543095856366E+01,
                                0.208756929753827868E+00, 0.370327340957595652E+01,
                                0.889777151877331107E+01};
const double ROOT_DEG14_IM[] = {0.119406921611247440E+01, 0.358882439228376881E+01,
                                0.600483209099604664E+01, 0.846173881758693369E+01,
                                0.109912615662209418E+02, 0.136563731924991884E+02,
                                0.166309842834712071E+02};

const int N_ROOT = 7;
const int N_COEF = 8;

const double *ROOT_RE = ROOT_DEG14_RE;
const double *ROOT_IM = ROOT_DEG14_IM;
const double *COEF_RE = COEF_DEG14_RE;
const double *COEF_IM = COEF_DEG14_IM;

#define MIDX(A, r, c, lda) ((A)[(r) * (lda) + (c)])

void print_dm(const double *A, size_t n_row, size_t n_col, size_t lda, const std::string &name) {
  std::cout << "Matrix: " << name << "(" << n_row << " x " << n_col << ")" << std::endl;
  for (size_t r = 0; r < n_row; r++) {
    std::cout << "[";
    for (size_t c = 0; c < n_col; c++) {
      std::cout << MIDX(A, r, c, lda);
      if (c < n_col - 1) std::cout << " ";
    }
    std::cout << "]" << std::endl;
  }
}

void print_dv(const double *v, size_t n, const std::string &name) {
  std::cout << "Vector: " << name << "(" << n << ")" << std::endl;
  std::cout << "[";
  for (size_t i = 0; i < n; i++) {
    std::cout << v[i];
    if (i < n - 1) std::cout << " ";
  }
  std::cout << "]" << std::endl;
}

class ArnoldiExpmMultiply {
public:
  ArnoldiExpmMultiply(size_t n, int m) :
      _n(n), _m(m),
      _A(static_cast<double *>(malloc(sizeof(double) * n * n))),
      _v(static_cast<double *>(malloc(sizeof(double) * n))),
      _H(nullptr), _Q(nullptr), _eHm(nullptr), _eA(nullptr),
      _X_1(nullptr), _X_2(nullptr), _N(nullptr), _D(nullptr),
      _ipiv(static_cast<int *>(malloc(sizeof(int) * n))),
      _ipiv_m(static_cast<int *>(malloc(sizeof(int) * m))),
      _e1(nullptr), _eHme1(nullptr), _Hm_minus_theta_I_c(nullptr),
      _y_c(nullptr), _e1_c(nullptr) {}

  ~ArnoldiExpmMultiply() {
    free(_A);
    free(_v);
    if (_H) free(_H);
    if (_Q) free(_Q);
    if (_eAv) free(_eAv);
    if (_X_1) free(_X_1);
    if (_X_2) free(_X_2);
    if (_N) free(_N);
    if (_D) free(_D);
    if (_ipiv) free(_ipiv);
    if (_ipiv_m) free(_ipiv_m);
    if (_e1) free(_e1);
    if (_eHme1) free(_eHme1);
    if (_Hm_minus_theta_I_c) free(_Hm_minus_theta_I_c);
    if (_y_c) free(_y_c);
    if (_e1_c) free(_e1_c);
  }

  double *get_A() { return _A; }

  double *get_v() { return _v; }

  double *get_eAv() { return _eAv; }

private:
  const size_t _n;
  const int _m;

  double *_A;
  double *_v;

  double *_H;
  double *_Q;

  double *_eHm;
  double *_eAv;

  double *_eA;
  double *_X_1;
  double *_X_2;
  double *_N;
  double *_D;

  double *_e1;
  double *_eHme1;

  lapack_complex_double *_Hm_minus_theta_I_c;
  lapack_complex_double *_y_c;
  lapack_complex_double *_e1_c;

  int *_ipiv;
  int *_ipiv_m;

public:
  void prepare_pade() {
    _eAv = (double *) malloc(_n * sizeof(double));
    _X_1 = (double *) malloc(_n * _n * sizeof(double));
    _X_2 = (double *) malloc(_n * _n * sizeof(double));
    _N = (double *) malloc(_n * _n * sizeof(double));
    _D = (double *) malloc(_n * _n * sizeof(double));
    pade_ss_expm(_A, _n, _eA);
  }

  void pade_ss_expm_multiply() {
    cblas_dgemv(CblasRowMajor, CblasNoTrans, _n, _n, 1.0, _eA, _n, _v, 1, 0.0, _eAv, 1);
  }

  void prepare_arnoldi_pade_ss() {
    _e1 = (double *) malloc(_m * sizeof(double));
    _eHme1 = (double *) malloc(_m * sizeof(double));
    _eAv = (double *) malloc(_n * sizeof(double));
    _H = (double *) malloc((_m + 1) * _m * sizeof(double));
    _Q = (double *) malloc(_n * (_m + 1) * sizeof(double));
    _X_1 = (double *) malloc(_m * _m * sizeof(double));
    _X_2 = (double *) malloc(_m * _m * sizeof(double));
    _N = (double *) malloc(_m * _m * sizeof(double));
    _D = (double *) malloc(_m * _m * sizeof(double));
    std::fill(_e1, _e1 + _m, 0.0);
    _e1[0] = 1.0;
  }

  void arnoldi_pade_ss_expm_multiply() {
    arnoldi_iteration();
    pade_ss_expm(_H, _m, _eHm);
    const double beta = cblas_dnrm2(_n, _v, 1);
    cblas_dgemv(CblasRowMajor, CblasNoTrans, _m, _m, 1.0, _eHm, _m, _e1, 1, 0.0, _eHme1, 1);
    cblas_dgemv(CblasRowMajor, CblasNoTrans, _n, _m, beta, _Q, _m + 1, _eHme1, 1, 0.0, _eAv, 1);
  }

  /// Memory usage:
  /// roughly: (n*m + (2*n_root+1)*m*m + n + (2*n_root+4)*m) * sizeof(double)
  /// n: number of rows(columns) of A, whose expm is to be calculated
  /// m: dimension of krylov subspace
  /// n_root: 5 or 7 depending on the order of chebyshev approximation (higher order is also possible)
  /// for n=1024, m=100: 1.6Mb...
  void prepare_arnoldi_chebyshev() {
    _e1_c = (lapack_complex_double *) malloc(_m * sizeof(lapack_complex_double));
    _eHme1 = (double *) malloc(_m * sizeof(double));
    _H = (double *) malloc((_m + 1) * _m * sizeof(double));
    _Q = (double *) malloc(_n * (_m + 1) * sizeof(double));
    _Hm_minus_theta_I_c = (lapack_complex_double *) malloc(
        _m * _m * sizeof(lapack_complex_double) * N_ROOT);
    _y_c = (lapack_complex_double *) malloc(_m * sizeof(lapack_complex_double) * N_ROOT);
    _eAv = (double *) malloc(_n * sizeof(double));
    _e1 = (double *) malloc(_m * sizeof(double));

    std::fill(_e1_c, _e1_c + _m, 0.0);
    _e1_c[0] = 1.0;
  }

  /// Complexity (using only a single thread, and roughly estimated...)
  /// arnoldi_iteration: O(m^3 + m*n^2)
  /// arnoldi_chebyshev_expm_multiply: O(m^3 + m*n^2 + c(zgesv, m, 1))
  /// wjere c(zgesv, m, 1) is to solve a linear system with m equations and m variables and 1 rhs...
  void arnoldi_chebyshev_expm_multiply() {
    arnoldi_iteration();
    cblas_daxpby(_m, COEF_RE[0], _e1, 1, 0.0, _eHme1, 1);

    const size_t m_sqrd = _m * _m;

#pragma omp parallel for default(none) shared(N_ROOT, ROOT_RE, ROOT_IM, COEF_RE, COEF_IM, m_sqrd) num_threads(8)
    for (int i = 0; i < N_ROOT; i++) {
      for (size_t j = 0; j < m_sqrd; j++) _Hm_minus_theta_I_c[m_sqrd * i + j] = -_H[j];

      lapack_complex_double theta(ROOT_RE[i], ROOT_IM[i]);
      for (size_t j = 0; j < _m; j++) {
        _Hm_minus_theta_I_c[m_sqrd * i + j * _m + j] -= theta;
      }

      cblas_zcopy(_m, _e1_c, 1, _y_c + _m * i, 1);
      LAPACKE_zgesv(LAPACK_ROW_MAJOR, _m, 1, _Hm_minus_theta_I_c + m_sqrd * i, _m,
                    _ipiv_m, _y_c + _m * i, 1);

      lapack_complex_double alpha(COEF_RE[i + 1], COEF_IM[i + 1]);
      cblas_zscal(_m, &alpha, _y_c + _m * i, 1);

#pragma omp critical
      {
        for (size_t j = 0; j < _m; j++) _eHme1[j] += lapack_complex_double_real(_y_c[_m * i + j]);
      }
    }

    // the same as with arnoldi pade ss
    const double beta = cblas_dnrm2(_n, _v, 1);
    cblas_dgemv(CblasRowMajor, CblasNoTrans, _n, _m, beta, _Q, _m
                                                               + 1, _eHme1, 1, 0.0, _eAv, 1);
  }

private:

  void pade_ss_expm(double *A, size_t n, double *&eA) {
    int ret = 0;
    int rows = n;
    int leading_dim = n;

    assert(rows > 0);

    // how to set t?
    const double t = 1.0;
    double inf_norm = LAPACKE_dlange(CblasRowMajor, 'I', rows, rows, A, leading_dim);
    assert(inf_norm > 0.0);
    int At_norm = static_cast<int>(inf_norm * t);
    int scale_exp = std::min(30, std::max(0, 1 + At_norm));

    double Ascal = t / std::pow(2.0, scale_exp);
    assert(Ascal > 0.0);
    cblas_dscal(n * n, Ascal, A, 1);

    constexpr int q = 3;
    double c = 0.5;
    double sign = -1.0;

    cblas_dcopy(n * n, A, 1, _X_1, 1);

    for (size_t i = 0; i < n * n; i++) {
      _X_2[i] = 0.0;
      _N[i] = 0.0;
      _D[i] = 0.0;
    }

    for (size_t i = 0; i < static_cast<size_t>(rows); i++) {
      MIDX(_N, i, i, n) = 1.0;
      MIDX(_D, i, i, n) = 1.0;
    }

    cblas_daxpy(n * n, c, _X_1, 1, _N, 1);
    cblas_daxpy(n * n, sign * c, _X_1, 1, _D, 1);

    for (int i = 2; i <= q;) {
      c = c * (q - i + 1) / (i * (2 * q - i + 1));
      sign *= -1.0;

      cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, rows, rows, rows,
                  1.0, A, leading_dim, _X_1, leading_dim, 0.0,
                  _X_2, leading_dim);
      cblas_daxpy(n * n, c, _X_2, 1, _N, 1);
      cblas_daxpy(n * n, sign * c, _X_2, 1, _D, 1);

      i += 1;

      if (i > q) { break; }

      c = c * (q - i + 1) / (i * (2 * q - i + 1));
      sign *= -1.0;

      cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, rows, rows, rows,
                  1.0, A, leading_dim, _X_2, leading_dim, 0.0,
                  _X_1, leading_dim);
      cblas_daxpy(n * n, c, _X_1, 1, _N, 1);
      cblas_daxpy(n * n, sign * c, _X_1, 1, _D, 1);

      i += 1;
    }

    ret = LAPACKE_dgesv(CblasRowMajor, rows, rows, _D, leading_dim, _ipiv, _N, leading_dim);
    assert(ret == 0);

    auto r1 = _N;
    auto r2 = _D;
    for (int i = 0; i < scale_exp; ++i) {
      cblas_dgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, rows, rows, rows,
                  1.0, r1, leading_dim, r1, leading_dim, 0.0,
                  r2, leading_dim);
      std::swap(r1, r2);
    }

    eA = r1;
  }

  /// Complexity (using a single thread)
  /// Roughly: O(m*n*n + m*m*m + m*m) = O(m^3 + m*n^2)
  void arnoldi_iteration() {
    std::fill(_H, _H + (_m + 1) * _m, 0.0);
    std::fill(_Q, _Q + _n * (_m + 1), 0.0);

    // beta = ||v||_2 is also used in the final approximation
    const double beta = cblas_dnrm2(_n, _v, 1);

    // normalization: v1 = v / ||v||_2
    cblas_dcopy(_n, _v, 1, _Q, _m + 1);
    cblas_dscal(_n, 1.0 / beta, _Q, _m + 1);

    // arnoldi iterations
    for (int j = 0; j < _m; j++) {
      // candidate for the next basis: w = A * v_j+1
      cblas_dgemv(CblasRowMajor, CblasNoTrans, _n, _n, 1.0, _A, _n,
                  _Q + j, _m + 1, 0.0, _Q + j + 1, _m + 1);

      // remove components in directions of other bases
      for (int i = 0; i <= j; i++) {
        const double hij = cblas_ddot(_n, _Q + i, _m + 1, _Q + j + 1, _m + 1);
        MIDX(_H, i, j, _m) = hij;
        cblas_daxpy(_n, -hij, _Q + i, _m + 1, _Q + j + 1, _m + 1);
      }

      // compute next basis
      const double h_jp1_j = cblas_dnrm2(_n, _Q + j + 1, _m + 1);
      if (h_jp1_j > 1e-12) {
        MIDX(_H, j + 1, j, _m) = h_jp1_j;
        cblas_dscal(_n, 1.0 / h_jp1_j, _Q + j + 1, _m + 1);
      } else {
        break;
      }
    }

    // print_dm(_H, _m + 1, _m, _m, "H");
    // print_dm(_Q, _n, _m + 1, _m + 1, "Q");
  }

};


int main(int argc, char *argv[]) {

//  openblas_set_num_threads(4);
  std::cout << "num of threads: " << openblas_get_num_threads() << std::endl;

  std::ifstream fin("/home/sunflower/Desktop/arnoldi-master/lagrange-ng-regression"
                    "/50taxa_10regions_2workers_4tpw/11/A.txt");
  int n;
  fin >> n;
  std::vector<double> data(n * n);
  for (int i = 0; i < n * n; i++) fin >> data[i];
  fin.close();

  std::vector<double> v_data(n);
  v_data[0] = 0.1915194503788923, v_data[1] = 0.6221087710398319, v_data[2] = 0.4377277390071145, v_data[3] = 0.7853585837137692, v_data[4] = 0.7799758081188035, v_data[5] = 0.2725926052826416, v_data[6] = 0.2764642551430967, v_data[7] = 0.8018721775350193, v_data[8] = 0.9581393536837052, v_data[9] = 0.8759326347420947, v_data[10] = 0.35781726995786667, v_data[11] = 0.5009951255234587, v_data[12] = 0.6834629351721363, v_data[13] = 0.7127020269829002, v_data[14] = 0.37025075479039493, v_data[15] = 0.5611961860656249, v_data[16] = 0.5030831653078097, v_data[17] = 0.013768449590682241, v_data[18] = 0.772826621612374, v_data[19] = 0.8826411906361166, v_data[20] = 0.3648859839013723, v_data[21] = 0.6153961784334937, v_data[22] = 0.07538124164297655, v_data[23] = 0.3688240060019745, v_data[24] = 0.9331401019825216, v_data[25] = 0.6513781432265774, v_data[26] = 0.3972025777261542, v_data[27] = 0.7887301429407455, v_data[28] = 0.31683612216887125, v_data[29] = 0.5680986526260692, v_data[30] = 0.8691273895612258, v_data[31] = 0.43617342389567937, v_data[32] = 0.8021476420801591, v_data[33] = 0.14376682451456457, v_data[34] = 0.7042609711183354, v_data[35] = 0.7045813081895725, v_data[36] = 0.21879210567408858, v_data[37] = 0.924867628615565, v_data[38] = 0.44214075540417663, v_data[39] = 0.9093159589724725, v_data[40] = 0.0598092227798519, v_data[41] = 0.18428708381381365, v_data[42] = 0.04735527880151513, v_data[43] = 0.6748809435823302, v_data[44] = 0.5946247799344488, v_data[45] = 0.5333101629987506, v_data[46] = 0.04332406269480349, v_data[47] = 0.5614330800633979, v_data[48] = 0.329668445620915, v_data[49] = 0.5029668331126184, v_data[50] = 0.11189431757440382, v_data[51] = 0.6071937062184846, v_data[52] = 0.5659446430505314, v_data[53] = 0.00676406199000279, v_data[54] = 0.617441708804297, v_data[55] = 0.9121228864331543, v_data[56] = 0.7905241330570334, v_data[57] = 0.9920814661883615, v_data[58] = 0.9588017621528665, v_data[59] = 0.7919641352916398, v_data[60] = 0.2852509600245098, v_data[61] = 0.624916705305911, v_data[62] = 0.47809379567067456, v_data[63] = 0.19567517866589823, v_data[64] = 0.38231745203150647, v_data[65] = 0.05387368514623658, v_data[66] = 0.45164840826085906, v_data[67] = 0.9820047415219545, v_data[68] = 0.12394270048696299, v_data[69] = 0.1193808979262484, v_data[70] = 0.7385230561433468, v_data[71] = 0.5873036334639846, v_data[72] = 0.4716325343203678, v_data[73] = 0.1071268171938663, v_data[74] = 0.22921856546061792, v_data[75] = 0.8999651948366754, v_data[76] = 0.4167535378026932, v_data[77] = 0.5358516625316159, v_data[78] = 0.006208516587129398, v_data[79] = 0.30064170577030114, v_data[80] = 0.4368931721756102, v_data[81] = 0.6121489970657575, v_data[82] = 0.9181980753805731, v_data[83] = 0.6257366699625353, v_data[84] = 0.7059975650817732, v_data[85] = 0.14983371598992723, v_data[86] = 0.7460634091367166, v_data[87] = 0.8310069924335378, v_data[88] = 0.6337257689509791, v_data[89] = 0.4383098811224275, v_data[90] = 0.15257277467450536, v_data[91] = 0.5684096152471901, v_data[92] = 0.5282242775850605, v_data[93] = 0.9514287637535932, v_data[94] = 0.4803591785100161, v_data[95] = 0.5025595633825504, v_data[96] = 0.5368781929244097, v_data[97] = 0.8192020670641583, v_data[98] = 0.05711563808885989, v_data[99] = 0.6694217430745488, v_data[100] = 0.7671166283794725, v_data[101] = 0.7081153619776038, v_data[102] = 0.7968671837251966, v_data[103] = 0.5577608284274495, v_data[104] = 0.9658365319921276, v_data[105] = 0.14715689989299718, v_data[106] = 0.02964700053541558, v_data[107] = 0.5938934926247718, v_data[108] = 0.11406569874266248, v_data[109] = 0.9508098500841222, v_data[110] = 0.32570741442534723, v_data[111] = 0.1936186901537772, v_data[112] = 0.45781164889742754, v_data[113] = 0.9204025710930878, v_data[114] = 0.8790691615146757, v_data[115] = 0.2526157550465302, v_data[116] = 0.34800879286934616, v_data[117] = 0.18258873158030875, v_data[118] = 0.9017960513709921, v_data[119] = 0.7065281631717975, v_data[120] = 0.7266584615621408, v_data[121] = 0.9000878368097077, v_data[122] = 0.7791638007693242, v_data[123] = 0.5991547806042924, v_data[124] = 0.29112524489787484, v_data[125] = 0.15139526440743212, v_data[126] = 0.3351746591494349, v_data[127] = 0.6575517771578194, v_data[128] = 0.07334254363261816, v_data[129] = 0.05500639540622365, v_data[130] = 0.32319481392117644, v_data[131] = 0.5904818044629861, v_data[132] = 0.8538985671256417, v_data[133] = 0.287062425000009, v_data[134] = 0.17306722681479214, v_data[135] = 0.13402120599884282, v_data[136] = 0.9946538286442945, v_data[137] = 0.17949786946939184, v_data[138] = 0.31754682302719583, v_data[139] = 0.5682914046591072, v_data[140] = 0.00934857450024451, v_data[141] = 0.9006486211550919, v_data[142] = 0.9772414309225871, v_data[143] = 0.5568946791368349, v_data[144] = 0.08477384339419014, v_data[145] = 0.3330024657291001, v_data[146] = 0.728428676369672, v_data[147] = 0.14243537334181722, v_data[148] = 0.5524689394975455, v_data[149] = 0.2730432596836856, v_data[150] = 0.9744951380872597, v_data[151] = 0.6677869061450377, v_data[152] = 0.25565328643413965, v_data[153] = 0.10831149418272878, v_data[154] = 0.7761807231738822, v_data[155] = 0.782477992600202, v_data[156] = 0.7616039143074941, v_data[157] = 0.9144031132693238, v_data[158] = 0.6586227819424226, v_data[159] = 0.5683675815729324, v_data[160] = 0.2017556924529783, v_data[161] = 0.6982963755517612, v_data[162] = 0.9521954098154773, v_data[163] = 0.8899632871420051, v_data[164] = 0.9935673628631737, v_data[165] = 0.8187035102039255, v_data[166] = 0.5451221661797199, v_data[167] = 0.4512540549640983, v_data[168] = 0.8905571879288573, v_data[169] = 0.9732647911186689, v_data[170] = 0.5934113295689697, v_data[171] = 0.36607449772047085, v_data[172] = 0.3230946929662495, v_data[173] = 0.871423255048698, v_data[174] = 0.21563406298839582, v_data[175] = 0.7349451885621964, v_data[176] = 0.3656190873671856, v_data[177] = 0.8016025985027602, v_data[178] = 0.7827355919753762, v_data[179] = 0.701355379236693, v_data[180] = 0.6227765866031991, v_data[181] = 0.49368264574711207, v_data[182] = 0.8405377001184887, v_data[183] = 0.7120969869436473, v_data[184] = 0.44390898141585244, v_data[185] = 0.031034861133332647, v_data[186] = 0.36323976019359805, v_data[187] = 0.7307217914103388, v_data[188] = 0.4755665730836416, v_data[189] = 0.3444169701220027, v_data[190] = 0.6408804349960188, v_data[191] = 0.12620532161439946, v_data[192] = 0.17146526096424974, v_data[193] = 0.7370864936885216, v_data[194] = 0.1270293935724024, v_data[195] = 0.3696498749466268, v_data[196] = 0.6043340048360264, v_data[197] = 0.10310443885564724, v_data[198] = 0.8023741823372101, v_data[199] = 0.9455532358421244, v_data[200] = 0.9790388199339376, v_data[201] = 0.881232246338927, v_data[202] = 0.6276819214639752, v_data[203] = 0.9304865334026656, v_data[204] = 0.7247899531024389, v_data[205] = 0.7166778860553562, v_data[206] = 0.04107856658418385, v_data[207] = 0.4394817751674749, v_data[208] = 0.28206978311608777, v_data[209] = 0.3349959688919273, v_data[210] = 0.0835270070444003, v_data[211] = 0.760849147057386, v_data[212] = 0.5092724471639539, v_data[213] = 0.6610474176084522, v_data[214] = 0.6303144424842815, v_data[215] = 0.3709268274575275, v_data[216] = 0.4467401517308447, v_data[217] = 0.4151082201975932, v_data[218] = 0.4803885080134066, v_data[219] = 0.9833235733884662, v_data[220] = 0.37342370735353736, v_data[221] = 0.012406981727713595, v_data[222] = 0.9219033377990289, v_data[223] = 0.873276070344208, v_data[224] = 0.35174682158758874, v_data[225] = 0.6301331125022921, v_data[226] = 0.35782695934169106, v_data[227] = 0.21281993764846496, v_data[228] = 0.22331922312265218, v_data[229] = 0.4195637917308277, v_data[230] = 0.07291022107806677, v_data[231] = 0.6508390701366923, v_data[232] = 0.7556861489509374, v_data[233] = 0.9321012263118122, v_data[234] = 0.3764041595819979, v_data[235] = 0.29692728344953345, v_data[236] = 0.37194431249415016, v_data[237] = 0.8276993588036342, v_data[238] = 0.9011395352502948, v_data[239] = 0.4273037848574962, v_data[240] = 0.0021894308231216186, v_data[241] = 0.04196524456467021, v_data[242] = 0.14178738316276462, v_data[243] = 0.5982371851051667, v_data[244] = 0.10646052201186085, v_data[245] = 0.2971589861743179, v_data[246] = 0.05839198991213279, v_data[247] = 0.6213248602513616, v_data[248] = 0.0226804761247833, v_data[249] = 0.8550546861316567, v_data[250] = 0.3063372028662724, v_data[251] = 0.7587834447539041, v_data[252] = 0.5632751101398661, v_data[253] = 0.03816418217864814, v_data[254] = 0.5655167240598379, v_data[255] = 0.6588734886482086, v_data[256] = 0.18326634939267783, v_data[257] = 0.7974113080911386, v_data[258] = 0.6123674294689488, v_data[259] = 0.5556533844497369, v_data[260] = 0.6294915446223843, v_data[261] = 0.686180075331102, v_data[262] = 0.2403825375227866, v_data[263] = 0.7879277879795397, v_data[264] = 0.8564774570595708, v_data[265] = 0.7277960155986192, v_data[266] = 0.6923451434159611, v_data[267] = 0.47235093907018477, v_data[268] = 0.8568729419345008, v_data[269] = 0.6647433339043061, v_data[270] = 0.3333759422753245, v_data[271] = 0.5181454992563133, v_data[272] = 0.39468858344517255, v_data[273] = 0.03104959835636134, v_data[274] = 0.5768398431331209, v_data[275] = 0.8502517453488608, v_data[276] = 0.9514888651736451, v_data[277] = 0.6829787971082667, v_data[278] = 0.07616254819602797, v_data[279] = 0.410077942772487, v_data[280] = 0.04190139877173671, v_data[281] = 0.17418683157537918, v_data[282] = 0.5654020055647535, v_data[283] = 0.17289117059986037, v_data[284] = 0.5666104779444462, v_data[285] = 0.5140042529495411, v_data[286] = 0.8688708875473768, v_data[287] = 0.7203472479309528, v_data[288] = 0.9035913470702983, v_data[289] = 0.2776149982333721, v_data[290] = 0.25666543218148796, v_data[291] = 0.6997032628614107, v_data[292] = 0.9015688962489394, v_data[293] = 0.9836923251215781, v_data[294] = 0.640912812426245, v_data[295] = 0.33000738853521094, v_data[296] = 0.6066752162291601, v_data[297] = 0.8221597885758906, v_data[298] = 0.6279650654611616, v_data[299] = 0.1179230575007103, v_data[300] = 0.2858776733511563, v_data[301] = 0.9867472153378646, v_data[302] = 0.43180084849092437, v_data[303] = 0.5742344137830644, v_data[304] = 0.5272420766742302, v_data[305] = 0.1976530493775127, v_data[306] = 0.1657084322248341, v_data[307] = 0.5009904579221985, v_data[308] = 0.9902040600853143, v_data[309] = 0.3939918113086468, v_data[310] = 0.7140132652766149, v_data[311] = 0.17590426942327275, v_data[312] = 0.07069617875044265, v_data[313] = 0.15762308631249733, v_data[314] = 0.16155801350883592, v_data[315] = 0.28363708226213924, v_data[316] = 0.536706025564066, v_data[317] = 0.7732387148932105, v_data[318] = 0.8803435812772044, v_data[319] = 0.6373914469574052, v_data[320] = 0.8526022402545531, v_data[321] = 0.597955371524427, v_data[322] = 0.6938466603020629, v_data[323] = 0.5371766731466012, v_data[324] = 0.889230083465696, v_data[325] = 0.052266426256819654, v_data[326] = 0.7831837007929678, v_data[327] = 0.14517326910169237, v_data[328] = 0.05869842598794717, v_data[329] = 0.058994580855538326, v_data[330] = 0.05197122986802538, v_data[331] = 0.5159860884415858, v_data[332] = 0.40499622009931346, v_data[333] = 0.9996495937701937, v_data[334] = 0.10857001055264426, v_data[335] = 0.3273843024947811, v_data[336] = 0.9978299320581024, v_data[337] = 0.4011143917380494, v_data[338] = 0.8833357664731261, v_data[339] = 0.5691385805274338, v_data[340] = 0.9532408896444166, v_data[341] = 0.8853872441552366, v_data[342] = 0.7792855915819448, v_data[343] = 0.03180806303617245, v_data[344] = 0.9626185297834763, v_data[345] = 0.5196354442314025, v_data[346] = 0.20779101145399448, v_data[347] = 0.8750978067386507, v_data[348] = 0.2241514790025958, v_data[349] = 0.1386593265369096, v_data[350] = 0.725239287506202, v_data[351] = 0.9737889095074972, v_data[352] = 0.5354818765953476, v_data[353] = 0.4447979980004906, v_data[354] = 0.022111178018510036, v_data[355] = 0.6059883403154945, v_data[356] = 0.9647965239566801, v_data[357] = 0.9675914809669351, v_data[358] = 0.9300288092605399, v_data[359] = 0.18467983199603233, v_data[360] = 0.6229621583614409, v_data[361] = 0.4129626697631321, v_data[362] = 0.3630612022054839, v_data[363] = 0.036602941344841544, v_data[364] = 0.8681487095718778, v_data[365] = 0.6728282126281492, v_data[366] = 0.08747161406172366, v_data[367] = 0.8869659392363946, v_data[368] = 0.7824645507653967, v_data[369] = 0.3173044112629603, v_data[370] = 0.8183137873870069, v_data[371] = 0.5075550682423482, v_data[372] = 0.021193301768068107, v_data[373] = 0.4335217582287817, v_data[374] = 0.4463130559537941, v_data[375] = 0.23881998940722982, v_data[376] = 0.8302457318410754, v_data[377] = 0.7447641766130533, v_data[378] = 0.5864790009601656, v_data[379] = 0.49286785256548205, v_data[380] = 0.487355879841193, v_data[381] = 0.2667406959229204, v_data[382] = 0.6050111014397169, v_data[383] = 0.753543720990287, v_data[384] = 0.27058422795323367, v_data[385] = 0.522303283132476, v_data[386] = 0.09832853021356114, v_data[387] = 0.7136366749694787, v_data[388] = 0.8840405940159821, v_data[389] = 0.5670544212280033, v_data[390] = 0.994481578897232, v_data[391] = 0.17873977026255816, v_data[392] = 0.012200086294428036, v_data[393] = 0.4569984805570808, v_data[394] = 0.9317519418549508, v_data[395] = 0.8460246882178747, v_data[396] = 0.4733298760702601, v_data[397] = 0.9025550260477352, v_data[398] = 0.22599552633736475, v_data[399] = 0.30415373865658635, v_data[400] = 0.7149938815135232, v_data[401] = 0.724091483437877, v_data[402] = 0.018676439423681468, v_data[403] = 0.285813103358881, v_data[404] = 0.5804863352453888, v_data[405] = 0.9307866320901698, v_data[406] = 0.3389969016787632, v_data[407] = 0.12008312306966606, v_data[408] = 0.5162727085257521, v_data[409] = 0.699207063311334, v_data[410] = 0.2986406770764749, v_data[411] = 0.8616096152791778, v_data[412] = 0.9058071953928739, v_data[413] = 0.7685832518477845, v_data[414] = 0.2612316407375056, v_data[415] = 0.9384555961966489, v_data[416] = 0.9386424555133467, v_data[417] = 0.7450445471078776, v_data[418] = 0.9107350428473103, v_data[419] = 0.23722470879453528, v_data[420] = 0.4949673521203938, v_data[421] = 0.8098783388099348, v_data[422] = 0.954565783825497, v_data[423] = 0.6374832545239696, v_data[424] = 0.9108497527256524, v_data[425] = 0.6921367511957678, v_data[426] = 0.042942989349085026, v_data[427] = 0.833586900687991, v_data[428] = 0.3699485159763737, v_data[429] = 0.9365570009013318, v_data[430] = 0.48305287517652307, v_data[431] = 0.1253316071684213, v_data[432] = 0.9644541837597798, v_data[433] = 0.01702583097601018, v_data[434] = 0.6765707650765702, v_data[435] = 0.140439966210832, v_data[436] = 0.1553128532832202, v_data[437] = 0.6495577470548793, v_data[438] = 0.9816542161384815, v_data[439] = 0.6948074153816085, v_data[440] = 0.7619738930361531, v_data[441] = 0.425209182802866, v_data[442] = 0.13889344396681091, v_data[443] = 0.21618630316008047, v_data[444] = 0.7647002723992947, v_data[445] = 0.054605869154590536, v_data[446] = 0.4901229891341178, v_data[447] = 0.18069018170516393, v_data[448] = 0.6309248464528918, v_data[449] = 0.5512420333566405, v_data[450] = 0.56708121448378, v_data[451] = 0.8183449753362828, v_data[452] = 0.9389873038064919, v_data[453] = 0.1929014148643482, v_data[454] = 0.7128440242924551, v_data[455] = 0.6979398042405625, v_data[456] = 0.2582964987037648, v_data[457] = 0.9158078195673033, v_data[458] = 0.532358186577165, v_data[459] = 0.5579644194083464, v_data[460] = 0.32277226816514915, v_data[461] = 0.3386307825985574, v_data[462] = 0.33230155404161943, v_data[463] = 0.9788182055927462, v_data[464] = 0.20321519554198297, v_data[465] = 0.6670260600647483, v_data[466] = 0.574784266941896, v_data[467] = 0.05197528656954964, v_data[468] = 0.5428381025901639, v_data[469] = 0.207949114938631, v_data[470] = 0.09109017971488453, v_data[471] = 0.8698557120089315, v_data[472] = 0.027369779496864033, v_data[473] = 0.9686245221962455, v_data[474] = 0.32749988957479015, v_data[475] = 0.4102779578675838, v_data[476] = 0.13554421504611225, v_data[477] = 0.127066310744954, v_data[478] = 0.41398397976413726, v_data[479] = 0.6174437360391936, v_data[480] = 0.13226690286735276, v_data[481] = 0.9744812178582788, v_data[482] = 0.18063510244452918, v_data[483] = 0.760349911196316, v_data[484] = 0.4821618152044177, v_data[485] = 0.7680788681442614, v_data[486] = 0.3028984428297671, v_data[487] = 0.015175090775453537, v_data[488] = 0.4633686864669543, v_data[489] = 0.7033370789190169, v_data[490] = 0.06604089290965509, v_data[491] = 0.6690114176568045, v_data[492] = 0.3454790558421603, v_data[493] = 0.5917214726030947, v_data[494] = 0.2290534578071075, v_data[495] = 0.26756836247775295, v_data[496] = 0.9328269856396992, v_data[497] = 0.8261450587838567, v_data[498] = 0.1454431928335156, v_data[499] = 0.6470036098933348, v_data[500] = 0.8839511653331675, v_data[501] = 0.7413605341557461, v_data[502] = 0.5157107993445175, v_data[503] = 0.13525184356482722, v_data[504] = 0.03988365260534921, v_data[505] = 0.8343218320889686, v_data[506] = 0.11705786929477491, v_data[507] = 0.523102313610054, v_data[508] = 0.8730584682565505, v_data[509] = 0.0387078369663274, v_data[510] = 0.6923907867937034, v_data[511] = 0.4762684781326564, v_data[512] = 0.16926448845838715, v_data[513] = 0.06317189225198372, v_data[514] = 0.032224091951774336, v_data[515] = 0.2424308563800346, v_data[516] = 0.11270682467406534, v_data[517] = 0.4049900173998413, v_data[518] = 0.04207297124273657, v_data[519] = 0.9265654494018641, v_data[520] = 0.9352629086037977, v_data[521] = 0.8104268974896139, v_data[522] = 0.1883430784330069, v_data[523] = 0.5873182233905117, v_data[524] = 0.9035105556616785, v_data[525] = 0.9673422647363511, v_data[526] = 0.0675392149333145, v_data[527] = 0.31758607171718534, v_data[528] = 0.6968629710758295, v_data[529] = 0.6402653755299328, v_data[530] = 0.6326233136490094, v_data[531] = 0.8287506490793103, v_data[532] = 0.7131104267315977, v_data[533] = 0.33548022716525805, v_data[534] = 0.1676946768408637, v_data[535] = 0.7646898163213187, v_data[536] = 0.35931506248110234, v_data[537] = 0.08800478164562353, v_data[538] = 0.729567599641644, v_data[539] = 0.8810499283806688, v_data[540] = 0.041263881190583884, v_data[541] = 0.17486776146597938, v_data[542] = 0.4200974148999833, v_data[543] = 0.34060657930268423, v_data[544] = 0.04476891580512821, v_data[545] = 0.11289131390858753, v_data[546] = 0.43804148786497743, v_data[547] = 0.07107320402361217, v_data[548] = 0.8162451076572044, v_data[549] = 0.8661156482926846, v_data[550] = 0.13111984191888182, v_data[551] = 0.19321944967382543, v_data[552] = 0.43749275177383007, v_data[553] = 0.9709253246769842, v_data[554] = 0.7738609642776244, v_data[555] = 0.13177647170942253, v_data[556] = 0.9271798636813225, v_data[557] = 0.8277965797457089, v_data[558] = 0.39273166536032633, v_data[559] = 0.14057064612501624, v_data[560] = 0.05213633919285221, v_data[561] = 0.09272931541880536, v_data[562] = 0.8869896303635146, v_data[563] = 0.16815096721603073, v_data[564] = 0.36288661191539784, v_data[565] = 0.654281885755908, v_data[566] = 0.6048219533599956, v_data[567] = 0.39499287224606716, v_data[568] = 0.374605400191655, v_data[569] = 0.06307277176847204, v_data[570] = 0.4289590278321619, v_data[571] = 0.7197209260539168, v_data[572] = 0.7680308900379784, v_data[573] = 0.1943681456814491, v_data[574] = 0.8628707690920991, v_data[575] = 0.02872195327971383, v_data[576] = 0.9021288166624716, v_data[577] = 0.2365458799233633, v_data[578] = 0.1285842607309633, v_data[579] = 0.31787578802936023, v_data[580] = 0.8487612955163809, v_data[581] = 0.8322977467112267, v_data[582] = 0.3456513524819397, v_data[583] = 0.23997118833742048, v_data[584] = 0.5357875534875303, v_data[585] = 0.2714669358211127, v_data[586] = 0.03443087444437665, v_data[587] = 0.6270855902214832, v_data[588] = 0.5202004609456864, v_data[589] = 0.04195581410042326, v_data[590] = 0.7574727689591487, v_data[591] = 0.9883497629555019, v_data[592] = 0.8014009582228148, v_data[593] = 0.3439810863259909, v_data[594] = 0.3353912425086101, v_data[595] = 0.3515714029977641, v_data[596] = 0.4429456793479247, v_data[597] = 0.5794934352195878, v_data[598] = 0.617560909235845, v_data[599] = 0.17711748796716031, v_data[600] = 0.8649817885471703, v_data[601] = 0.7102706906143289, v_data[602] = 0.17063168843512866, v_data[603] = 0.8550826592835196, v_data[604] = 0.019856621939199237, v_data[605] = 0.6416837319888642, v_data[606] = 0.16233435266960028, v_data[607] = 0.2575504904814395, v_data[608] = 0.3426064600197094, v_data[609] = 0.006144141992962426, v_data[610] = 0.438551060569743, v_data[611] = 0.7970441109629298, v_data[612] = 0.6756649386859863, v_data[613] = 0.5450230881419105, v_data[614] = 0.5642269921964154, v_data[615] = 0.013984149272947555, v_data[616] = 0.6089771393982423, v_data[617] = 0.988566380395264, v_data[618] = 0.22410702367810986, v_data[619] = 0.5872177182045185, v_data[620] = 0.835057949517175, v_data[621] = 0.792497575721143, v_data[622] = 0.32922799547679127, v_data[623] = 0.35720255977190307, v_data[624] = 0.9601129626332069, v_data[625] = 0.2237955926383074, v_data[626] = 0.2115367109107772, v_data[627] = 0.1539151651554771, v_data[628] = 0.4958958451799126, v_data[629] = 0.2612947801739528, v_data[630] = 0.555686443059607, v_data[631] = 0.07291600406345222, v_data[632] = 0.37851683864020613, v_data[633] = 0.4610890262219788, v_data[634] = 0.7785404459053258, v_data[635] = 0.7204427175954919, v_data[636] = 0.23120448105058056, v_data[637] = 0.024544392270420712, v_data[638] = 0.25736494091433015, v_data[639] = 0.4101160298818074, v_data[640] = 0.008398995643327356, v_data[641] = 0.4715489466785864, v_data[642] = 0.8524221108557279, v_data[643] = 0.9231796983487692, v_data[644] = 0.23143613391385098, v_data[645] = 0.9909549144773288, v_data[646] = 0.00599789644568971, v_data[647] = 0.3352505223695663, v_data[648] = 0.7892581129429734, v_data[649] = 0.09851151520557266, v_data[650] = 0.4423322492793622, v_data[651] = 0.3806693244811875, v_data[652] = 0.8325984691057939, v_data[653] = 0.7119621853453636, v_data[654] = 0.3550008257184951, v_data[655] = 0.024636334496583312, v_data[656] = 0.6935125189274827, v_data[657] = 0.4212119413777494, v_data[658] = 0.8583494431985278, v_data[659] = 0.5750735537897981, v_data[660] = 0.9400623621608281, v_data[661] = 0.8802555194340772, v_data[662] = 0.4581450305526181, v_data[663] = 0.017310067532119056, v_data[664] = 0.06865464138104715, v_data[665] = 0.32060801613800083, v_data[666] = 0.592301886875462, v_data[667] = 0.6100524383177331, v_data[668] = 0.5124275033627143, v_data[669] = 0.14475645834020423, v_data[670] = 0.8768086932029943, v_data[671] = 0.7382351791730666, v_data[672] = 0.37332038389285294, v_data[673] = 0.8286863831259897, v_data[674] = 0.09023953749159697, v_data[675] = 0.0640032187223154, v_data[676] = 0.5058969484672987, v_data[677] = 0.9334267114347921, v_data[678] = 0.14896191795666847, v_data[679] = 0.5694787932065706, v_data[680] = 0.059748654975448456, v_data[681] = 0.16927792686397525, v_data[682] = 0.06902836007911584, v_data[683] = 0.906022451088881, v_data[684] = 0.44741006025066266, v_data[685] = 0.10638520057084155, v_data[686] = 0.6652597785267627, v_data[687] = 0.5022733771443969, v_data[688] = 0.4092063820531787, v_data[689] = 0.7279934703381231, v_data[690] = 0.17209040928836994, v_data[691] = 0.38446089160188235, v_data[692] = 0.26700113751753196, v_data[693] = 0.30822087357044714, v_data[694] = 0.17730280295813294, v_data[695] = 0.4825584777226294, v_data[696] = 0.6297171958693155, v_data[697] = 0.05955332382443401, v_data[698] = 0.19688726843901838, v_data[699] = 0.2792084352318073, v_data[700] = 0.7078206081115874, v_data[701] = 0.32742908521588165, v_data[702] = 0.42529404390409387, v_data[703] = 0.7047675006820153, v_data[704] = 0.15907717026358748, v_data[705] = 0.4394038888853192, v_data[706] = 0.6293299859505094, v_data[707] = 0.9250580996438941, v_data[708] = 0.35698796334181615, v_data[709] = 0.8191334467437783, v_data[710] = 0.6401427896569581, v_data[711] = 0.7150524930762231, v_data[712] = 0.7384225168258165, v_data[713] = 0.970999612577972, v_data[714] = 0.24604923756453967, v_data[715] = 0.04258158034559045, v_data[716] = 0.2477972735058397, v_data[717] = 0.0450166367425745, v_data[718] = 0.7054616268665229, v_data[719] = 0.8347067705588824, v_data[720] = 0.9341358550244421, v_data[721] = 0.470793355896057, v_data[722] = 0.5123595171362272, v_data[723] = 0.2629804767742664, v_data[724] = 0.09889670914185722, v_data[725] = 0.7988463567843236, v_data[726] = 0.1428027763657762, v_data[727] = 0.8056657855845525, v_data[728] = 0.8795261009329534, v_data[729] = 0.4999201641959291, v_data[730] = 0.9142519408679308, v_data[731] = 0.4124125914571197, v_data[732] = 0.20037358728540033, v_data[733] = 0.6435711085763355, v_data[734] = 0.3998651431053525, v_data[735] = 0.6142314979393361, v_data[736] = 0.4373113967010318, v_data[737] = 0.5931037466558152, v_data[738] = 0.9514400107605424, v_data[739] = 0.5531204339168044, v_data[740] = 0.9037353572241487, v_data[741] = 0.13850475487181502, v_data[742] = 0.001543762571176166, v_data[743] = 0.6128343455235371, v_data[744] = 0.5417029302333204, v_data[745] = 0.7806306585261712, v_data[746] = 0.8214939537021361, v_data[747] = 0.9534097561382898, v_data[748] = 0.6099560916572095, v_data[749] = 0.29008182187646747, v_data[750] = 0.8268079939177951, v_data[751] = 0.3760168937257904, v_data[752] = 0.6091770259287945, v_data[753] = 0.6200215567209179, v_data[754] = 0.4414999699103934, v_data[755] = 0.19877189531271833, v_data[756] = 0.4439536209135434, v_data[757] = 0.9247673443219312, v_data[758] = 0.6714343597064386, v_data[759] = 0.08152309662887935, v_data[760] = 0.5726592489589111, v_data[761] = 0.12066219775600151, v_data[762] = 0.9999637237786394, v_data[763] = 0.9973803472503109, v_data[764] = 0.6947121427369083, v_data[765] = 0.3738798440981772, v_data[766] = 0.4015107889666544, v_data[767] = 0.9250994130048471, v_data[768] = 0.24485884177273487, v_data[769] = 0.6640126803938178, v_data[770] = 0.4812207510716413, v_data[771] = 0.034943558917187256, v_data[772] = 0.11089546193537603, v_data[773] = 0.8953693799671169, v_data[774] = 0.8921011380172498, v_data[775] = 0.9151609878091216, v_data[776] = 0.3074016709563725, v_data[777] = 0.2984196298370444, v_data[778] = 0.6592518589264048, v_data[779] = 0.5951377226079403, v_data[780] = 0.984369011651947, v_data[781] = 0.6156222569233373, v_data[782] = 0.1547163276223199, v_data[783] = 0.8314694652397151, v_data[784] = 0.8156970708364143, v_data[785] = 0.09204187578386891, v_data[786] = 0.8877899028867225, v_data[787] = 0.016439058115721328, v_data[788] = 0.863930113470806, v_data[789] = 0.8987706904729249, v_data[790] = 0.8503665670167624, v_data[791] = 0.6528693628591482, v_data[792] = 0.3287552409650387, v_data[793] = 0.5453793289985818, v_data[794] = 0.23793516815328786, v_data[795] = 0.8717846579434475, v_data[796] = 0.17673374226026972, v_data[797] = 0.3706358671574531, v_data[798] = 0.7595845287792191, v_data[799] = 0.30618390900932135, v_data[800] = 0.6161392549616267, v_data[801] = 0.21929117497272343, v_data[802] = 0.8725236662945125, v_data[803] = 0.6478649091606468, v_data[804] = 0.473002944755865, v_data[805] = 0.23419032113136462, v_data[806] = 0.833821813060067, v_data[807] = 0.09851632452770498, v_data[808] = 0.20502686016219862, v_data[809] = 0.2347305737757972, v_data[810] = 0.5969737725098645, v_data[811] = 0.6284675409759867, v_data[812] = 0.9826510416191935, v_data[813] = 0.1763166657912707, v_data[814] = 0.799977412956996, v_data[815] = 0.155264006768435, v_data[816] = 0.36099195822592756, v_data[817] = 0.9550752566497372, v_data[818] = 0.13015836785467383, v_data[819] = 0.2728465851520293, v_data[820] = 0.8091178680741082, v_data[821] = 0.9656570566737191, v_data[822] = 0.0924221640304499, v_data[823] = 0.5834242702086265, v_data[824] = 0.40542630633042165, v_data[825] = 0.899324187849237, v_data[826] = 0.08478344556945183, v_data[827] = 0.18113627660606346, v_data[828] = 0.050665473685672535, v_data[829] = 0.3012787381300698, v_data[830] = 0.19018385430454332, v_data[831] = 0.008605387212870519, v_data[832] = 0.12752290065445704, v_data[833] = 0.11286472381709578, v_data[834] = 0.7304144514692333, v_data[835] = 0.2393750328367401, v_data[836] = 0.9015701210377253, v_data[837] = 0.328513929753397, v_data[838] = 0.8740427227862205, v_data[839] = 0.23652951498749486, v_data[840] = 0.3784546056691771, v_data[841] = 0.5422905579912639, v_data[842] = 0.515793982275576, v_data[843] = 0.41380211817935897, v_data[844] = 0.3888666129030858, v_data[845] = 0.34033081792382924, v_data[846] = 0.4022346302066022, v_data[847] = 0.45710989671562485, v_data[848] = 0.382991057699981, v_data[849] = 0.6580897273542599, v_data[850] = 0.8812142062068413, v_data[851] = 0.5726725843308308, v_data[852] = 0.42804045703645377, v_data[853] = 0.25837793320598657, v_data[854] = 0.8652694331725107, v_data[855] = 0.17327830073728934, v_data[856] = 0.5799528248242541, v_data[857] = 0.7273774983778601, v_data[858] = 0.7304023353507609, v_data[859] = 0.40399581600605594, v_data[860] = 0.11792747098531864, v_data[861] = 0.7635946309185067, v_data[862] = 0.5336610922316459, v_data[863] = 0.7220348587598121, v_data[864] = 0.5976323350197082, v_data[865] = 0.422865969987956, v_data[866] = 0.933486087660147, v_data[867] = 0.9939709930102423, v_data[868] = 0.5478388389420347, v_data[869] = 0.7302345718427495, v_data[870] = 0.027984285064759584, v_data[871] = 0.8635912766427543, v_data[872] = 0.9986307593601151, v_data[873] = 0.3253098239428288, v_data[874] = 0.8502608344688427, v_data[875] = 0.6114921194053263, v_data[876] = 0.441113079735458, v_data[877] = 0.5272045872076648, v_data[878] = 0.7798206115277303, v_data[879] = 0.25135019341230314, v_data[880] = 0.4628923211730681, v_data[881] = 0.8471866720601178, v_data[882] = 0.6780235943470242, v_data[883] = 0.36786229343862786, v_data[884] = 0.13798300932991858, v_data[885] = 0.4028094476041054, v_data[886] = 0.9312970923624136, v_data[887] = 0.6731627853182345, v_data[888] = 0.41922981537211956, v_data[889] = 0.56866661206277, v_data[890] = 0.04171068434173819, v_data[891] = 0.9956341275493791, v_data[892] = 0.6190042191163182, v_data[893] = 0.7794661237762386, v_data[894] = 0.9313386353483447, v_data[895] = 0.3416185604633858, v_data[896] = 0.8112991994740427, v_data[897] = 0.8727098022055328, v_data[898] = 0.6659882250669068, v_data[899] = 0.5887865481770524, v_data[900] = 0.8933522602993403, v_data[901] = 0.44858401875441445, v_data[902] = 0.2443835793760556, v_data[903] = 0.8141729643304512, v_data[904] = 0.6971493985840633, v_data[905] = 0.40960454104371957, v_data[906] = 0.005715084265157211, v_data[907] = 0.9540143640593324, v_data[908] = 0.6052525996207352, v_data[909] = 0.006546276598804135, v_data[910] = 0.49849348704896135, v_data[911] = 0.5986353460187746, v_data[912] = 0.30014745012654453, v_data[913] = 0.4617574961687403, v_data[914] = 0.4955997811562337, v_data[915] = 0.5856591409297529, v_data[916] = 0.8696379884568705, v_data[917] = 0.8322269591800283, v_data[918] = 0.7785630480046082, v_data[919] = 0.5484331076870916, v_data[920] = 0.6134519565059346, v_data[921] = 0.734269727131313, v_data[922] = 0.5663690914040016, v_data[923] = 0.7752101347163012, v_data[924] = 0.9865456057635305, v_data[925] = 0.789205689695726, v_data[926] = 0.614335981666345, v_data[927] = 0.15828453925312613, v_data[928] = 0.47638631421351496, v_data[929] = 0.28364917344606433, v_data[930] = 0.15381226525214176, v_data[931] = 0.7772204195291714, v_data[932] = 0.05896313339403003, v_data[933] = 0.07912250151506761, v_data[934] = 0.6642384626894174, v_data[935] = 0.5233449810510065, v_data[936] = 0.44640688957974783, v_data[937] = 0.3068304470352262, v_data[938] = 0.017285121383037283, v_data[939] = 0.2935268414003157, v_data[940] = 0.267793965612215, v_data[941] = 0.03672560166771588, v_data[942] = 0.8040395779250156, v_data[943] = 0.3337995572945953, v_data[944] = 0.89188668456753, v_data[945] = 0.8103532335210993, v_data[946] = 0.9641012075430367, v_data[947] = 0.9577140638355018, v_data[948] = 0.591165504928018, v_data[949] = 0.31150331937007514, v_data[950] = 0.9184207302800608, v_data[951] = 0.050650456231351226, v_data[952] = 0.22574268139336806, v_data[953] = 0.3627060986740449, v_data[954] = 0.41225570156048696, v_data[955] = 0.9446212956883407, v_data[956] = 0.5793825450262945, v_data[957] = 0.18676015112638134, v_data[958] = 0.5964846652939199, v_data[959] = 0.9337562971862535, v_data[960] = 0.13413814035982696, v_data[961] = 0.9822835302866814, v_data[962] = 0.15387565322303187, v_data[963] = 0.8207281374584079, v_data[964] = 0.6775364747468368, v_data[965] = 0.4040892596862298, v_data[966] = 0.21728704135130628, v_data[967] = 0.7735847352321291, v_data[968] = 0.8476959291308404, v_data[969] = 0.5296996198709953, v_data[970] = 0.4095997195121094, v_data[971] = 0.018307946647702078, v_data[972] = 0.14865961285064577, v_data[973] = 0.8043351900625192, v_data[974] = 0.41977812359804045, v_data[975] = 0.3392175702741931, v_data[976] = 0.2971458504721979, v_data[977] = 0.7179859935634314, v_data[978] = 0.9978071813139916, v_data[979] = 0.5519022755385359, v_data[980] = 0.8898960452095016, v_data[981] = 0.1684682870642641, v_data[982] = 0.8835642961544377, v_data[983] = 0.7027756374098312, v_data[984] = 0.42210865394477726, v_data[985] = 0.8633149477603772, v_data[986] = 0.23504322614251094, v_data[987] = 0.563750663429838, v_data[988] = 0.026560250936994545, v_data[989] = 0.3800514541366583, v_data[990] = 0.36183509707674444, v_data[991] = 0.09124352492984988, v_data[992] = 0.04525353373768126, v_data[993] = 0.3424515132947733, v_data[994] = 0.3554139753162816, v_data[995] = 0.9958382380486689, v_data[996] = 0.9442045718534874, v_data[997] = 0.13114411183839636, v_data[998] = 0.5183550554747868, v_data[999] = 0.4772453753499617, v_data[1000] = 0.40110640866052494, v_data[1001] = 0.9306144016650845, v_data[1002] = 0.5153361469497669, v_data[1003] = 0.8095820185970475, v_data[1004] = 0.8817722277751203, v_data[1005] = 0.7626677820706171, v_data[1006] = 0.46442070218186504, v_data[1007] = 0.07391960466043601, v_data[1008] = 0.4704993578739891, v_data[1009] = 0.2005719774576743, v_data[1010] = 0.20856722359570423, v_data[1011] = 0.17753960019911685, v_data[1012] = 0.3542414486212886, v_data[1013] = 0.9117531262167204, v_data[1014] = 0.4335209190432803, v_data[1015] = 0.178295886319636, v_data[1016] = 0.7521622490756228, v_data[1017] = 0.050470565702775194, v_data[1018] = 0.08266851738546488, v_data[1019] = 0.038583441544881136, v_data[1020] = 0.4652786064829074, v_data[1021] = 0.6038286634957863, v_data[1022] = 0.18178934320545626, v_data[1023] = 0.5190297006211498;

  const int m = 20;
  const int max_nv = 500;
  const int ntest = 1;
  std::vector<long double> timings(max_nv);
  std::fill(timings.begin(), timings.end(), 0.0);

#define EXPM_METHOD 2
#define CHECK_RESULT 1
#define BREAK_AT_FIRST 1

  for (int test = 0; test < ntest; test++) {
    std::cout << "test: " << test << std::endl;

    for (int nv = 1; nv <= max_nv; nv++) {
      ArnoldiExpmMultiply expm_mul(n, m);
      auto A = expm_mul.get_A();
      auto v = expm_mul.get_v();
      std::copy(data.begin(), data.end(), A);
      std::copy(v_data.begin(), v_data.end(), v);

#if EXPM_METHOD == 0
      std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();
      expm_mul.prepare_pade();
      for (int i = 0; i < nv; i++) {
        expm_mul.pade_ss_expm_multiply();
      }
      std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
#elif EXPM_METHOD == 1
      std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();
      expm_mul.prepare_arnoldi_pade_ss();
      for (int i = 0; i < nv; i++) {
        expm_mul.arnoldi_pade_ss_expm_multiply();
      }
      std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
#elif EXPM_METHOD == 2
      std::chrono::steady_clock::time_point begin = std::chrono::steady_clock::now();
      expm_mul.prepare_arnoldi_chebyshev();
      for (int i = 0; i < nv; i++) {
        expm_mul.arnoldi_chebyshev_expm_multiply();
#if BREAK_AT_FIRST
        break;
#endif
      }
      std::chrono::steady_clock::time_point end = std::chrono::steady_clock::now();
#endif

      timings[nv - 1] += std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count();

#if CHECK_RESULT
      auto eAv = expm_mul.get_eAv();
      std::cout << "[";
      for (int i = 0; i < n; i++) {
        std::cout << eAv[i];
        if (i < n - 1) std::cout << ", ";
      }
      std::cout << "]" << std::endl;
#if BREAK_AT_FIRST
      break;
    }
    break;
#else
    }
#endif
#else
    }
#endif
  }

#if EXPM_METHOD == 0
  std::cout << "timings_pade_ss = [";
#elif EXPM_METHOD == 1
  std::cout << "timings_arnoldi_pade_ss = [";
#elif EXPM_METHOD == 2
  std::cout << "timings_arnoldi_chebyshev = [";
#endif
  for (size_t i = 0; i < timings.size(); i++) {
    std::cout << timings[i] / ((long double) ntest);
    if (i < timings.size() - 1) std::cout << ", ";
  }
  std::cout << "]" << std::endl;

  return 0;
}